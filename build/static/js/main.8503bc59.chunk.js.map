{"version":3,"sources":["managed/iiifEndpoints.js","components/RansomWord.js","components/RansomLetters.js","components/WordSearch.js","components/ManifestPanel.js","components/ManifestLoader.js","App.js","i18n.js","index.js"],"names":["multilingualManifests","RansomWord","imageMetadata","ransomWord","keyName","language","wordIndex","useState","image","setImage","useTranslation","i18n","t","useEffect","Math","floor","random","length","changeLanguage","className","src","imageURL","alt","name","manifestId","label","onClick","RansomLetters","letterToSearch","manifestData","letterMatches","setLetterMatches","searchComplete","setSearchComplete","countdown","letterMatchArray","forEach","manifest","getData","searchURL","stringToSearch","a","axios","get","data","letterResources","letterResourceImages","map","resource","resourceCanvas","split","generousImageCoords","coord","parseInt","join","filter","canvas","replace","undefined","WordSearch","wordToSearch","wordMatches","setWordMatches","wordMatchArray","wordResources","wordResourceImages","imageCoords","letter","index","ManifestPanel","matchedManifests","Object","values","href","ManifestLoader","selectedLanguageManifest","setSelectedLanguageManifest","setManifestData","ransomNote","setRansomNote","userInputWordsArray","setUserInputWordsArray","setMatchedManifests","manifestArray","manifestURL","searchService","service","returnedManifestData","push","handleRemoveWord","event","target","id","ransomWordId","updatedUserInputWordsArray","userInput","filterMatchedManifest","letterId","handleShit","newMatchedManifest","newData","placeholder","value","onChange","splitInput","input","userInputWord","onLoad","App","setLanguage","availableLanguages","keys","lang","resources","en","translation","ar","use","initReactI18next","init","lng","keySeparator","interpolation","escapeValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8503bc59.chunk.js","sourcesContent":["export const multilingualManifests = {\n  'ar' : [\n    'https://www.agda.ae/en/catalogue/tna/fo/371/168903/iiif/manifest',\n    'https://www.agda.ae/en/catalogue/tna/fo/93/137/iiif/manifest'\n  ],\n  'en' : [\n    'https://www.agda.ae/en/catalogue/tna/fo/371/109817/iiif/manifest',\n    'https://www.agda.ae/en/catalogue/tna/fo/371/168903/iiif/manifest',\n    'https://www.agda.ae/en/catalogue/tna/fo/93/137/iiif/manifest',\n    'https://www.agda.ae/en/catalogue/tna/fo/464/57/iiif/manifest'\n  ]\n} ","import React, { useEffect, useState } from 'react'\nimport { useTranslation } from 'react-i18next';\nimport { FaRedo } from 'react-icons/fa';\n\n\nconst RansomWord = ({imageMetadata, ransomWord, keyName, language, wordIndex }) => {\n\n  const [ image, setImage ] = useState('')\n\n  const { t, i18n } = useTranslation()\n\n  useEffect(() => {\n    setImage(imageMetadata[Math.floor(Math.random() * imageMetadata.length)])\n    i18n.changeLanguage(language)\n  },[i18n, imageMetadata, language])\n\n  const handleRandomiser = () => {\n    setImage(imageMetadata[Math.floor(Math.random() * imageMetadata.length)])\n  }\n\n\n  return (\n    <div className={`${keyName}`}>\n      <img src={`${image.imageURL}`} alt={`OCR of ${ransomWord}`} name={`${wordIndex}_${ransomWord}---${image.manifestId}---${image.label}`}/>\n      { imageMetadata.length > 1 ?\n        <div\n          onClick={handleRandomiser}\n          className='refresh'\n        ><FaRedo /></div>\n        :\n        <div className='refresh'>This is the only image found for \"{ransomWord}\"</div>\n      }\n    </div>\n  )\n}\n\nexport default RansomWord\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport RansomWord from './RansomWord';\n\nconst RansomLetters = ({letterToSearch, manifestData, language, wordIndex}) => {\n\n  const [ letterMatches, setLetterMatches ] = useState()\n  const [ searchComplete, setSearchComplete ] = useState(false)\n\n\n  useEffect(() => {\n    let countdown = manifestData.length;\n    let letterMatchArray = []\n    manifestData.forEach(manifest => {\n      const getData = async(searchURL, stringToSearch) => {\n        const { data } = await axios.get(`${searchURL}?q=${stringToSearch}`)\n        const letterResources =  data['resources']\n        if(letterResources.length > 0) {\n          const letterResourceImages = letterResources.map(resource => {\n            const resourceCanvas = resource['on'].split('#')[0]\n            const imageCoords = resource['on'].split('=')[1].split(',')\n            const generousImageCoords = imageCoords.map(coord => parseInt(coord) + 10).join(',')\n            const manifestImage = manifest['canvases'].filter(canvas => {\n              return canvas['@id'] === resourceCanvas\n            })\n            let imageURL = manifestImage[0]['images'][0]['resource']['@id']\n            imageURL = imageURL.replace('full',generousImageCoords)\n            return {imageURL : imageURL,\n              label: manifest['label'],\n              manifestId: manifest['manifestId']\n              }\n          })\n          letterMatchArray = [...letterMatchArray, ...letterResourceImages]\n          setLetterMatches(letterMatchArray)\n        } \n      }\n      getData(manifest['searchURL'],letterToSearch)\n      countdown -= 1\n      if (countdown === 0) {\n        setSearchComplete(true)\n      }\n    });\n    \n  },[letterToSearch, manifestData])\n\n\n  if(!searchComplete ){\n    return null;\n  }\n\n\n\n  return (\n    <div>\n      {letterMatches !== undefined ? \n          <RansomWord \n            imageMetadata={letterMatches} \n            ransomWord={letterToSearch} \n            language={language}\n            keyName={'letter'}\n            wordIndex={wordIndex}\n          />\n    :\n    <div>\n      {letterToSearch}\n    </div>\n    }\n\n    </div>\n  )\n}\n\nexport default RansomLetters","import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport RansomWord from './RansomWord';\nimport RansomLetters from './RansomLetters';\n\nconst WordSearch = ({wordToSearch, manifestData, language, wordIndex}) => {\n\n  const [ wordMatches, setWordMatches ] = useState()\n  const [ searchComplete, setSearchComplete ] = useState(false)\n\n\n  useEffect(() => {\n    let countdown = manifestData.length;\n    let wordMatchArray = []\n    manifestData.forEach(manifest => {\n      const getData = async(searchURL, stringToSearch) => {\n        const { data } = await axios.get(`${searchURL}?q=${stringToSearch}`)\n        const wordResources =  data['resources']\n        if(wordResources.length > 0) {\n          const wordResourceImages = wordResources.map(resource => {\n            const resourceCanvas = resource['on'].split('#')[0]\n            const imageCoords = resource['on'].split('=')[1]\n            const manifestImage = manifest['canvases'].filter(canvas => {\n              return canvas['@id'] === resourceCanvas\n            })\n            let imageURL = manifestImage[0]['images'][0]['resource']['@id']\n            imageURL = imageURL.replace('full',imageCoords)\n            return {imageURL : imageURL,\n                    label: manifest['label'],\n                    manifestId: manifest['manifestId']\n                    }\n          })\n          wordMatchArray = [...wordMatchArray, ...wordResourceImages]\n          setWordMatches(wordMatchArray)\n        } \n      }\n      getData(manifest['searchURL'],wordToSearch)\n      countdown -= 1\n      if (countdown === 0) {\n        setSearchComplete(true)\n      }\n    });\n    \n  },[wordToSearch])\n\n  if(!searchComplete ){\n    return null;\n  }\n\n  return (\n    <>\n\n        {wordMatches !== undefined ? \n          <>\n            <RansomWord\n              imageMetadata={wordMatches}\n              ransomWord={wordToSearch}\n              keyName={'word'}\n              language={language}\n              wordIndex={wordIndex}\n            />\n          </>\n      :\n          <div className='ransom-letters'>\n              {wordToSearch.split('').map((letter, index) => {\n                return <RansomLetters \n                        key={index}\n                        letterToSearch={letter} \n                        manifestData={manifestData}\n                        language={language}\n                        wordIndex={wordIndex}\n                      />\n              })}\n          </div>\n      }\n\n      \n    </>\n\n  )\n}\n\nexport default WordSearch","import React from 'react'\n\nconst ManifestPanel = ({matchedManifests}) => {\n\n  const manifestData = Object.values(matchedManifests)\n\n  return (\n    <div>\n      {manifestData.map((manifest, index) => {\n        return <div key={index}>\n            <p>{manifest.ransomWord}: <a href={`${manifest.manifestId}`}>{manifest.label}</a></p>\n          </div>\n      })}\n    </div>\n  )\n}\n\nexport default ManifestPanel","import { useState, useEffect } from 'react'\nimport axios from 'axios';\nimport { useTranslation } from 'react-i18next';\nimport { FaTrashAlt } from 'react-icons/fa';\n\nimport { multilingualManifests } from '../managed/iiifEndpoints'\nimport WordSearch from './WordSearch';\nimport ManifestPanel from './ManifestPanel';\n\n\nconst ManifestLoader = ({language}) => {\n\n  const { t, i18n } = useTranslation()\n\n  const [selectedLanguageManifest, setSelectedLanguageManifest] = useState([])\n  const [manifestData, setManifestData] = useState(null)\n  const [ransomNote, setRansomNote] = useState('');\n  const [userInputWordsArray, setUserInputWordsArray] = useState([]);\n  const [ matchedManifests, setMatchedManifests ] = useState()\n\n  useEffect(() => {\n    setSelectedLanguageManifest(multilingualManifests[`${language}`])\n    i18n.changeLanguage(language)\n  }, [language, i18n])\n\n  useEffect(() => {\n    let manifestArray = []\n    selectedLanguageManifest.forEach(manifestURL => {\n      const getData = async () => {\n        const { data } = await axios.get(manifestURL)\n        const searchService = data['service'].filter(service => service['@context'] === 'http://iiif.io/api/search/1/context.json')\n        if (searchService.length > 0) {\n          const returnedManifestData = {\n            'label': data['label']['@value'],\n            'manifestId': data['@id'],\n            'canvases': data['sequences'][0]['canvases'],\n            'searchURL': searchService[0]['@id']\n          }\n          manifestArray.push(returnedManifestData)\n        }\n      }\n      getData();\n    })\n    setManifestData(manifestArray)\n\n  }, [selectedLanguageManifest])\n\n\n  const handleChange = (event) => {\n    const userInput = event.target.value;\n    const splitInput = userInput.split(' ').filter(input => input !== '')\n    setRansomNote(userInput);\n    if (userInput[userInput.length - 1] === ' ') {\n      setUserInputWordsArray(splitInput);\n    } \n  };\n\n  const handleRemoveWord = (event) => {\n\n    const ransomWord = event.target.id.split('_')[1]\n    const ransomWordId = event.target.id.split('_')[0]\n    const updatedUserInputWordsArray = userInputWordsArray.filter(userInput => userInput !== ransomWord)\n    setUserInputWordsArray(updatedUserInputWordsArray)\n    setRansomNote(updatedUserInputWordsArray.join(' '))\n\n    const filterMatchedManifest = {...matchedManifests}\n    if (filterMatchedManifest[event.target.id]){\n      delete filterMatchedManifest[event.target.id]\n    } else {\n      const letterIdArray = ransomWord.split('').map(letter => `${ransomWordId}_${letter}`)\n      letterIdArray.forEach(letterId => delete filterMatchedManifest[letterId])\n    }\n    setMatchedManifests(filterMatchedManifest)\n\n  }\n\n  const handleShit = (event) => {\n\n    const ransomWordId = event.target.name.split('---')[0]\n    \n    const newMatchedManifest = {\n        ransomWord : event.target.name.split('---')[0].split('_')[1],\n        manifestId : event.target.name.split('---')[1],\n        label : event.target.name.split('---')[2]\n  \n\n    }\n    const newData = { ...matchedManifests, [ransomWordId]: newMatchedManifest}\n    setMatchedManifests(newData)\n\n  }\n\n  if (!manifestData) {\n    return null;\n  }\n\n  return (\n    <div className='prsng-body'>\n      <div className='demand'>\n        <form>\n          <div>\n            <input\n              className='input'\n              placeholder={t(\"demands-input\")}\n              value={ransomNote}\n              onChange={handleChange}\n            />\n          </div>\n        </form>\n      </div>\n      <div className='ransom-output'>\n        <div className='ransom-words'>\n          {userInputWordsArray.map((userInputWord,index) => {\n            return <div \n                    className='ransom-word'\n                    key={index}\n                    onLoad={handleShit}\n                  >\n                  <div\n                  id={`${index}_${userInputWord}`}\n                  onClick={handleRemoveWord}\n                  className='remove'\n                  >\n                    <FaTrashAlt />\n                  </div>\n                  < WordSearch \n                    wordToSearch={userInputWord} \n                    manifestData={manifestData}\n                    language={language}\n                    wordIndex={index}\n                  />\n                </div>\n          })}\n        </div>\n        <div className='manifest-panel'>\n        <h4>{t('matched-manifests')}</h4>\n          { matchedManifests !== undefined &&\n              <ManifestPanel matchedManifests={matchedManifests} />\n          }\n        </div>\n\n\n      </div>\n    </div>\n  )\n}\n\nexport default ManifestLoader","import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { multilingualManifests } from './managed/iiifEndpoints'\nimport ManifestLoader from './components/ManifestLoader';\n\nfunction App() {\n\n  const [language, setLanguage] = useState('en')\n  const { t, i18n } = useTranslation()\n\n  const availableLanguages = Object.keys(multilingualManifests);\n\n  const handleLanguageSelection = (event) => {\n    setLanguage(event.target.value)\n    i18n.changeLanguage(event.target.value)\n  }\n\n  return (\n    <div className='app-body'>\n      <div className='prsng-body'>\n        <h1>{t(\"title\")}</h1>\n        <div className='language-select'>\n          <h3>{t(\"language-select\")}</h3>\n          <select onChange={handleLanguageSelection} value={language} className='language-option'>\n            {availableLanguages.map(lang => {\n              return <option\n              key={lang}\n              value={lang}\n              >\n                {lang}\n              </option>\n            })}\n          </select>\n        </div>\n      </div>\n        <ManifestLoader language={language}/>\n    </div>\n  );\n}\n\nexport default App;\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport translationEN from \"./locales/en/translation.json\";\nimport translationAR from \"./locales/ar/translation.json\";\n\nconst resources = {\n  en: {\n    translation: translationEN,\n  },\n  ar: {\n    translation: translationAR,\n  },\n};\n\ni18n\n  .use(initReactI18next)\n  .init({\n    resources,\n    lng:\"en\", //default language\n    keySeparator: false,\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"./i18n\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}